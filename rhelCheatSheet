echo supports escape
echo -e enables \n newlines eg
echo -e "hi \n there \n How are you"
quotes not needed
echo hello world 

grep -i searchterm: case-insensitive
egrep is grep -e
fgrep is grep -f

sed : print line number 9
sed -n 9p /etc/ssh/sshd_config

sed: delete line
sed -i -e '2d' ~/myfile


grep for ip address:
grep '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'

awk works better than cut at extracting whitespace seperated fields:
 ps aux|awk '{ print $4}'
ps can sort output directly, eg
ps aux --sort -%mem (descending)    (kernel threads in [] brackets)
ps aux --sort %cpu (ascending)
ps -ef shows precise command args 
ps fax - shows tree
pgrep dd shows pids of all 'dd' processes
uptime, top show load average
lscpu shows core count
tuned daemon, tuned-adm for switching perf profile, eg
tuned-adm list
tuned-adm recommend
tuned-adm profile throughput-performance

systemd
systemctl list-dependencies mytarget - get mytarget deps
systemctl list-dependencies --reverse mytarget- get services that are dependent on mytarget
systemctl --type=service : show active service units
systemctl list-units --type=service : show all service units defined
systemctl list-units --type=service --all : show  active and inactive service units
systemctl --failed --type=service : show services that have failed
systemctl status -l your.service : show detailed info about your.service
systemctl show myservice: show unit options
systemctl cat myservice.service  - show unit file for myservice
systemctl edit myservice.service - edit unit file in nano
systemctl daemon-reload - systemd re-reads  unit files, recreates dependency tree. sockets stay open

[Unit]
Requires=myservice, will ensure myservice starts first

targets, wants:
ls /etc/systemd/system/multi-user.target.wants displays all the symlink wants for a target. Services install themselves here when enabledÂ¨. 
That's all that systemctl enable does: Creates symlink

cron
user specific files created with crontab -e stored in /car/spool/cron/$USER
don't edit /etc/crontab directly - place files in /etc/cron.d
cron relies on anacron service. Configured via /etc/anacrontab, which reads /etc/cron.hourly, /etc/cron.daily, /etc/cron.weekly files
/etc/cron.allow *or* /etc/cron.deny files (not both) configure permissions to use cron
atd daemon runs at tasks
check at queue with atq
passwords
chage sets attributes interactively 

Logging
journalctl -u myservice, for systemd managed services
journalctl -f follows the log
journalctl -p err - errors only
journalctl -k shows kernel messages (note, dmesg shows time relative to boot time, journalctl show clock time)
journalctl --since yesterday
journalctl _SYSTEMD_UNIT=sshd.service
/var/log/messages, /var/log/audit/audit.log/audit/audit.log for SELinux
logger, to write directly to /var/log/messages via rsyslogd 
logger -p myservice.debug logs at debug level (-p priority)
rsyslogd configured by /etc/rsyslogd.conf, and /etc/rsyslog.d/
hostnamectl status shows systeminfo, more than uname -a does
systemd-udevd service loads hardware
udevadm monitor shows hardware discovery in realtime. Each new piece of detected hardware produces /sys entry
modprobe and modprobe -r to load/unload module
lspci to list pic devices. lspci -k to include module info
/etc/modprobe.d/ file to specify module parameters
eg: echo "options cdrom debug=1" >> /etc/modprobe.d/cdrom.conf
parameter names from modinfo

sample config in /etc/rsyslog.d: 
*.=info /var/log/message.info
then systemctl restart rsyslogd
then logger -p user.info Hello

/etc/sysconfig/rsyslog options appear to be deprecated
/etc/logrotate.conf stores log rotation settings
/etc/systemd/journal.conf configures persistance of the journal. If Storage=persistant or auto , 
and /var/log/journal exists and is writable by systemd-journal, journald logs will be persisted:
chown root:systemd-journal /var/log/journal (set group ownership)
chmod 2755 /var/log/journal (set guid)

yum:
upgrade
update
reinstall
group list
search
info, and group info
remove
createrepo
repolist
provides */file
history undo <>nn

createrepo - needs to be installed7


modules/streams
yum module info perl
yum module install php:7.2
yum module install perl/minimal (minimal profile of latest perl application stream)
yum module enable perl:5.24
yum distro-sync - update dependencies


rpm:
-q query (or, repoquery, without --scripts available)
-i install
-e erase

eg rpm -qf /bin/ls - query which package includes ls
rpm -qi dnsmasq - query pacakge info from rpm database
rpm -ql dnsmasq - list all files in package
rpm -qd dnsmasq - query doc files in package
rpm -qc dnsmasq - query config files in package
rpm -qR dnsmasq - query dnsmasq dependencies
rpm -qp --scripts package_name.rpm - list scripts in .rpm package prior to installation
rpm -q --scripts package - query scripts in package

awk with space delim, reverse
ps -ef|awk -F" " '{print $2}'|rev

redirect when find-ing or when errors expected
find / -name filename 2>/dev/null

repeat commands
!first letters
or 
Ctrl-r searches backwards


vim
line numbers: (set number) :se nu
:1,$ implies entire file (all lines)

case insensitive: 
:1,$s/search/replace/gi , or
:%s/search/replace/gi

delete to current line .
:1,.g/pattern/d 
delete lines 5-8
:5,8d 

tar
peek inside, list
tar -tf file.tar.gz
preserve permissions on -x or -x7
-p 

bzip2 to zip
bunzip2 to unzip

/var/log/messages 

nmtui network manager UI

name lookup
nslookup, or dig

dhclient
run dhcp

firewall open port
iptables -I INPUT 1 -p tcp --dport 80 -j ACCEPT 
or 
firewall-cmd --permanent --add-port=21/tcp 
(requires firewalld service to be running)

partition list
fdisk for MBR partitions
gdisk for GPT partitions (> 2TiB)
fdisk -l
or fdisk interactively: p
check total sectors on disk, versus end sector of last partition, to see if space available
cat /proc/partitions to verify new partition table written to in-memory kernel partition table
partprobe : force reread of partition table by kernel
lsblk -o name,label,size gives tree view
blkid gives list, with UUIDs or labels for mounting

mkfs.xfs -L label /dev/sda1 formats sda1 as xfs  
mkswap /dev/sda3 formats sda3 as swap space
free -m shows free memory in MiB
swapon /dev/sda3 adds swap partition to memory
tune2fs for setting ext4 file system properties
xfs_admin -L mylabel for setting label on XFS filesystem 
mount -a, after editing /etc/fstab, mounts new partition
mount lists mount points

create logical volume:
lvcreate -n lvdata -l 50%FREE vgdata
vgextend vgdata /dev/sda5 converts /dev/sda5 to PV, adds to vg vgdata
lvextend -r -l +50%FREE /dev/vgdata/lvdata resizes lvdata AND (-r) resizes the filesystem on it

stratis
stratis-cli and stratisd yum packages
systemctl enable --now stratisd
stratis pool create mypool /dev/sdb adds entire disk to pool
stratis pool list 
stratis fs create mypool stratis1 creates XFS filesystem on entire pool, assigns it a UUIDs
stratis fs list
edit fstab:
UUID=uuid from blkid /mountpoint xfs defaults,x-systemd.requires=stratisd.service 0 0 (check man systemd.mount)
to take a snapshot,
stratis filesystem snapshot mypool stratis1 stratis1-snapshotname (stratis1 is the fs name from fs create) 

VDO
Sample systemd mount file at /usr/share/doc/vdo/examples/systemd/VDO.mount.example
copy to /etc/systemd/system/mymountpoint.mount

yum install -y vdo kmod-kvdo
create VD device
vdo create --name=vd01 --device=/dev/sdb --vdoLogicalSize=1T
mkfs.xfs -K /dev/mapper/vd01 (-K is an optimisation related to empty block handling)
cp /usr/share/doc/vdo/examples/systemd/VDO.mount.example /etc/systemd/system/vd01.mount
edit What and Where settings in mount file
systemct enable --now vd01.mount
vdostats --human-readable

SELinux
see security context of files:
ls -lZ
unconfined_u:object_r:user_home_t:s0 
user:role:type:level 

secondary check, after DAC
SELinux mode
getenforce, setenforce, ot sestatus

semanage: control SELinux policy


useful tool:
yum install selinux-policy-devel
,install man pages, so that, for example:
man passwd_selinux 
is possible

chcon
changes context of a file, eg chcon -t new_context_label file

restorecon - restore to default context

bin_t on .exe is powerful, puts process into unconfined_t

setsebool takes effect immediately, but does not persist across reboots (unless with -P)