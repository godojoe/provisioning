echo supports escape
echo -e enables \n newlines eg
echo -e "hi \n there \n How are you"
quotes not needed
echo hello world 

grep -i searchterm: case-insensitive
egrep is grep -e
fgrep is grep -f

sed : print line number 9
sed -n 9p /etc/ssh/sshd_config

sed: delete line
sed -i -e '2d' ~/myfile


grep for ip address:
grep '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'

awk works better than cut at extracting whitespace seperated fields:
 ps aux|awk '{ print $4}'
ps can sort output directly, eg
ps aux --sort -%mem (descending)    (kernel threads in [] brackets)
ps aux --sort %cpu (ascending)
ps -ef shows precise command args 
ps fax - shows tree
pgrep dd shows pids of all 'dd' processes
uptime, top show load average
lscpu shows core count
tuned daemon, tuned-adm for switching perf profile, eg
tuned-adm list
tuned-adm recommend
tuned-adm profile throughput-performance

systemd
systemctl list-dependencies mytarget - get mytarget deps
systemctl list-dependencies --reverse mytarget- get services that are dependent on mytarget
systemctl --type=service : show active service units
systemctl list-units --type=service : show all service units defined
systemctl list-units --type=service --all : show  active and inactive service units
systemctl --failed --type=service : show services that have failed
systemctl status -l your.service : show detailed info about your.service
systemctl show myservice: show unit options
systemctl cat myservice.service  - show unit file for myservice
systemctl edit myservice.service - edit unit file in nano
systemctl daemon-reload - systemd re-reads  unit files, recreates dependency tree. sockets stay open

systemctl mask myservice - myservice no longer eligible for starting ('A masked service is one whose unit file is a symlink to /dev/null. This makes it "impossible" to load the service, even if it is required by another, enabled service.' 

[Unit]
Requires=myservice, will ensure myservice starts first

targets, wants:
ls /etc/systemd/system/multi-user.target.wants displays all the symlink wants for a target. Services install themselves here when enabledÂ¨. 
That's all that systemctl enable does: Creates symlink

systemctl --type=target lists all loaded targets (add --all to show all targets)
systemctl isolate yourtarget.target to switch to that target
systemctl set-default to choose default target

cron
user specific files created with crontab -e stored in /var/spool/cron/$USER
don't edit /etc/crontab directly - place files in /etc/cron.d
cron relies on anacron service. Configured via /etc/anacrontab, which reads /etc/cron.hourly, /etc/cron.daily, /etc/cron.weekly files
/etc/cron.allow *or* /etc/cron.deny files (not both) configure permissions to use cron
atd daemon runs at tasks
check at queue with atq

passwords
chage sets attributes interactively 

Logging
journalctl -u myservice, for systemd managed services
journalctl -f follows the log
journalctl -p err - errors only
journalctl -k shows kernel messages (note, dmesg shows time relative to boot time, journalctl show clock time)
journalctl --since yesterday
journalctl _SYSTEMD_UNIT=sshd.service
journalctl -xb for debugging previous boot. -x adds explanatory messages to log
/var/log/messages, /var/log/audit/audit.log for SELinux
logger, to write directly to /var/log/messages via rsyslogd 
logger -p daemon.debug logs at debug level (-p priority)
rsyslogd configured by /etc/rsyslogd.conf, and /etc/rsyslog.d/
hostnamectl status shows systeminfo, more than uname -a does
systemd-udevd service loads hardware
udevadm monitor shows hardware discovery in realtime. Each new piece of detected hardware produces /sys entry
modprobe and modprobe -r to load/unload module
lspci to list pci devices. lspci -k to include module info
/etc/modprobe.d/ file to specify module parameters
eg: echo "options cdrom debug=1" >> /etc/modprobe.d/cdrom.conf
parameter names from modinfo

sample config in /etc/rsyslog.d: 
*.=info /var/log/message.info
then systemctl restart rsyslogd
then logger -p user.info Hello

/etc/sysconfig/rsyslog options appear to be deprecated
/etc/logrotate.conf stores log rotation settings
/etc/systemd/journal.conf configures persistance of the journal. If Storage=persistant or auto , 
and /var/log/journal exists and is writable by systemd-journal, journald logs will be persisted:
chown root:systemd-journal /var/log/journal (set group ownership)
chmod 2755 /var/log/journal (set guid)

yum:
upgrade
update
reinstall
group list
search
info, and group info
remove
createrepo
repolist
provides */file
history undo <>nn

createrepo - needs to be installed7


modules/streams
yum module info perl
yum module install php:7.2
yum module install perl/minimal (minimal profile of latest perl application stream)
yum module enable perl:5.24
yum distro-sync - update dependencies


rpm:
-q query (or, repoquery, without --scripts available)
-i install
-e erase

eg rpm -qf /bin/ls - query which package includes ls
rpm -qi dnsmasq - query pacakge info from rpm database
rpm -ql dnsmasq - list all files in package
rpm -qd dnsmasq - query doc files in package
rpm -qc dnsmasq - query config files in package
rpm -qR dnsmasq - query dnsmasq dependencies
rpm -qp --scripts package_name.rpm - list scripts in .rpm package prior to installation
rpm -q --scripts package - query scripts in package

awk with space delim, reverse
ps -ef|awk -F" " '{print $2}'|rev

redirect when find-ing or when errors expected
find / -name filename 2>/dev/null

repeat commands
!first letters
or 
Ctrl-r searches backwards


vim
line numbers: (set number) :se nu
:1,$ implies entire file (all lines)

case insensitive: 
:1,$s/search/replace/gi , or
:%s/search/replace/gi

delete to current line .
:1,.g/pattern/d 
delete lines 5-8
:5,8d 

tar
peek inside, list
tar -tf file.tar.gz
preserve permissions on -x or -x
-p 

bzip2 to zip
bunzip2 to unzip

/var/log/messages 

nmtui network manager UI

name lookup
nslookup, or dig

dhclient
run dhcp

Firewalld
firewall-cmd --get-default-zone
firewall-cmd --get-zones
firewall-cmd --get<tab> works
firewall-cmd --get-services (all defined services)
firewall-cmd --list-services (for current zone)
firewall-cmd --list-all (currently running config for current service)
firewall-cmd --list-all-zones (current config across all zones)
firewall-cmd --add-service=vnc-server (should show up when running --list-all. Non-permanent, does not survive restart firewalld, or firewall-cmd --
reload)
firewall-cmd --add-service=vnc-server --permanent  (if service already exists)
firewall-cmd --remove-service vnc-server --permanent
firewall-cmd --add-port=2021/tcp --permanent (NOT recommended: adds port explicitly, if no service defines the port)
To add a new service, copy an existing xml config from /usr/lib/firewalld/services/ftp.xml to /etc/firewalld/services/ and reload: should
then be visible via firewall-cmd --get-services
Service xml jsut defines port, description, and optionals kernel modules to load to request addtional ports
firewall-cmd --add-interface=en01 --zone=public
firewall-cmd --add-source=192.168.0.0/24


partition list
fdisk for MBR partitions
gdisk for GPT partitions (> 2TiB)
fdisk -l
or fdisk interactively: p
check total sectors on disk, versus end sector of last partition, to see if space available
cat /proc/partitions to verify new partition table written to in-memory kernel partition table
partprobe : force reread of partition table by kernel
lsblk -o name,label,size gives tree view
blkid gives list, with UUIDs or labels for mounting

mkfs.xfs -L label /dev/sda1 formats sda1 as xfs  
mkswap /dev/sda3 formats sda3 as swap space
free -m shows free memory in MiB
swapon /dev/sda3 adds swap partition to memory
tune2fs for setting ext4 file system properties
xfs_admin -L mylabel for setting label on XFS filesystem 
mount -a, after editing /etc/fstab, mounts new partition
mount lists mount points

create logical volume:
lvcreate -n lvdata -l 50%FREE vgdata
vgextend vgdata /dev/sda5 converts /dev/sda5 to PV, adds to vg vgdata
lvextend -r -l +50%FREE /dev/vgdata/lvdata resizes lvdata AND (-r) resizes the filesystem on it

stratis
stratis-cli and stratisd yum packages
systemctl enable --now stratisd
stratis pool create mypool /dev/sdb adds entire disk to pool
stratis pool list 
stratis fs create mypool stratis1 creates XFS filesystem on entire pool, assigns it a UUIDs
stratis fs list
edit fstab:
UUID=uuid from blkid /mountpoint xfs defaults,x-systemd.requires=stratisd.service 0 0 (check man systemd.mount)
to take a snapshot,
stratis filesystem snapshot mypool stratis1 stratis1-snapshotname (stratis1 is the fs name from fs create) 

VDO
Sample systemd mount file at /usr/share/doc/vdo/examples/systemd/VDO.mount.example
copy to /etc/systemd/system/my
mountpoint.mount

yum install -y vdo kmod-kvdo
create VD device
vdo create --name=vd01 --device=/dev/sdb --vdoLogicalSize=1T
mkfs.xfs -K /dev/mapper/vd01 (-K is an optimisation related to empty block handling)
cp /usr/share/doc/vdo/examples/systemd/VDO.mount.example /etc/systemd/system/vd01.mount
edit What and Where settings in mount file
systemct enable --now vd01.mount
vdostats --human-readable

GRUB
config at /etc/default/grub (rhgb quiet options can be removed to diagnose kernel via output during bootup. Also check  man 7 bootparam for more )
also /etc/grub.d
these config files produce
/boot/grub2/grub.cfg (generated during Linux installation and regenerated when a new kernel is installed.)
Create new grub.cfg via 
grub2-mkconfig -o /boot/grub2/grub.cfg


SELinux
enable/disable via /etc/sysconfig/selinux, or setenforce
see security context of files:
ls -lZ
unconfined_u:object_r:user_home_t:s0 
user:role:type:level 

secondary check, after DAC
SELinux mode
getenforce, setenforce, ot sestatus -v

semanage: control SELinux policy
part of policycoreutils-python-utils package (find with yum provides /*semanage )
eg: set ssh port to 2022
semanage port -a -t ssh_port_t -p tcp 2022
(also needs firewall-cmd --add-port=2022/tcp --permanent)


chcon
changes context of a file, eg chcon -t new_context_label file, 
BUT NOT to policy!
Changes lost when file system relabelled (which can happen unexpectedly - for example upon reboot after making fs changes with selinux disabled) - so AVOID!

SEManage
semanage fcontext: make policy changes to FILE. man semanage-fcontext, search for 'example', to see regex example.
Literally just copy out the example 'semanage fcontext -a -t httpd_sys_content_t "/web(/.*)?"'
after running semanage fcontext, 
restorecon -R -v to apply policy to file system (relabel - restore to default context)
restorecon - useful for fixing busted labels, eg, after moving a file
To relabel the whole filesystem:
restorecon -Rv /, or create /.autorelabel, for reboot

For picking labels to apply, sepolicy and man -k selinux is your friend
Installing SELinux man pages
man -k _selinux typically only has a few man pages
yum provides */sepolicy reveals that policycoreutils-devel is the needed package
yum -y install policycoreutils-devel
To install the man pages:
sepolicy manpage -a -p /usr/share/man/man8
mandb

bin_t on .exe is powerful, puts process into unconfined_t

setsebool takes effect immediately, but does not persist across reboots (unless with -P)
getsebool and semanage boolean -l lists booleans. 
semanage shows runtime vs permanent setting
/var/log/audit/audit.log AVC messages for debugging
avs: denied {map} means process lacked rights to read FILE attributes
comm : 'command'

sealert -a /var/log/audit/audit.log will list possible fixes to avc errors. 
(might need to be installed with yum install setroubleshoot-server, which produces the messages)

Troubleshooting
hit 'e' t boot time to edit kernel boot params
rd.break kernel param breaks while in initramfs stage - before root password needed
init=/bin/bash start shell immediately after loading kernel and initrd
systemd.unit=emergency.target or rescue.target, needs root pass

chroot /mnt/sysimage to point a rescue system loaded from rescue disk, to your installation
Then your / fs is located under /mnt/sysimage

GRUB can be re-installed using grub2-install /dev/sda
dracut can be used for creating a new initramfs: dracut --force to overwrite existing ramfs. /etc/dracut.conf for kernel features

'Give root password for maintenance' if there are fs issues - from fsck checking /etc/fstab
journalctl -xb for debugging previous boot. -x adds explanatory messages to log
mount -o remount,rw / to remount root fs in rw mode. /etc/fstab errors will be displayed

Resetting root password
Boot kernel with rd.break
make /sysroot writeable:
mount -o remount,rw /sysroot
chroot /sysroot
passwd root
force SELinux to relabel: echo "" >> /sysroot/.autorelabel (or loadpolicy -i ; chcon -t shadow_t /etc/shadow; if ONLY shadow file needs relabelling)

bash tricks
$# arg count
"$@" all arguments: array for loops
read to get user input
test command also written as []
[ -z $1] -> test if var1 is on-existant : -z checks for non-existance : 'zero-length'
never use spaces when defining variables.
var=5
bash -x myscript.sh for debugging

install mailx and postfix service to get mail working - systemctl start postfix, 
and send mail with subject like this
mail -s "mysubject" root <.
arithmetic expressions like this
VAR=$(($MYINTVAR*5))
USE lowercase OR MixedCase VARIABLES IN YOUR SCRIPT
Sample do until
#!/bin/bash
Seconds=$(($1*60))
echo $Seconds to countdown

until [ $Seconds -eq 0 ]
do
        sleep 1
        Seconds=$(( Seconds - 1 ))
        echo There are $Seconds seconds remaining
done
exit 0

Sample if elif
#!/bin/bash
if [ "one" = $1 ]
then
        touch /tmp/one
elif [ "two" = $1 ]
then
        mail -s "two" root <. >> /dev/null
fi

NFS
yum install nfs-utils
showmount -e server2.example.com
Mount:
mount server2.example.com:/ /mnt
Mount via fstab
server1:/share /nfs/mount/point nfs sync 0 0

Mounting via autofs
yum install autofs
echo "/nfsdata /etc/auto.nfsdata" >> /etc/auto.master
echo "files -rw server2:/nfsdata" >> /etc/auto.nfsdata
systemctl enable --now autofs
Wildcard(Home) mounting via autofs
echo "/users /etc/auto.users" >> /etc/auto.master
echo "* -rw server2:/users/&" >> /etc/auto.users
systemctl restart autofs
cd /users/usser1 should work

CIFS
yum install -y cifs-utils samba-client
test connectivity:
smbclient -L server2.example.com -U username
mount -t cifs -o user=student //server2.example.com/sambashare /mnt
(might need -o vers=2.0 or greater)

date
set time:  sudo date -s 20:54
hwclock --systohc
hwclock --hctosys
more general command, for all aspects of time: timedatectl
enable NTP: timedatectl set-ntp 1
NTP configured via /etc/chrony.conf
Timezones - set via tzselect
(or create symlink: ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime.
or use timedatectl)
Stratum, configured for chronyd/NTP service: lower value more -> reliable server 
Create NTP client: add to /etc/chrony.conf
server yourntpserver.example.com
Create NTP server:
add to /etc/chrony.conf:
allow 192.168.0.0/16
local stratum 8
restart chronyd  and add ntp to firewall zone

ssh as client:
save certificate password
Before connecting to remote
ssh-agent /bin/bash
ssh-add
connect, enter cert password, which gets cached

